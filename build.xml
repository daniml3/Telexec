<?xml version="1.0" encoding="UTF-8"?>
<!--
    Telexec: a modular Telegram Bot
    Copyright (C) 2020 daniml3

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
-->

<project name="telexec" default="all">
  
  
  <property file="build.properties"/>
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*.yarb/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.egg"/>
    <include name="*.zip"/>
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.ear"/>
    <include name="*.jar"/>
    <include name="*.klib"/>
    <include name="*.ane"/>
  </patternset>
  <patternset id="compiler.resources">
    <exclude name="**/?*.java"/>
    <exclude name="**/?*.form"/>
    <exclude name="**/?*.class"/>
    <exclude name="**/?*.groovy"/>
    <exclude name="**/?*.scala"/>
    <exclude name="**/?*.flex"/>
    <exclude name="**/?*.kt"/>
    <exclude name="**/?*.clj"/>
    <exclude name="**/?*.aj"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module Telexec -->
  
  <dirname property="module.telexec.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.telexec" value="-encoding UTF-8 -source 15 -target 15 ${compiler.args}"/>
  
  <property name="telexec.output.dir" value="${module.telexec.basedir}/out/production/Telexec"/>
  <property name="telexec.testoutput.dir" value="${module.telexec.basedir}/out/test/Telexec"/>
  
  <path id="telexec.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="telexec.module.production.classpath">
    <fileset dir="${basedir}/src/libs">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="telexec.runtime.production.module.classpath">
    <pathelement location="${telexec.output.dir}"/>
    <fileset dir="${basedir}/src/libs">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="telexec.module.classpath">
    <pathelement location="${telexec.output.dir}"/>
    <fileset dir="${basedir}/src/libs">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="telexec.runtime.module.classpath">
    <pathelement location="${telexec.testoutput.dir}"/>
    <pathelement location="${telexec.output.dir}"/>
    <fileset dir="${basedir}/src/libs">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  
  <patternset id="excluded.from.module.telexec">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.telexec">
    <patternset refid="excluded.from.module.telexec"/>
  </patternset>
  
  <path id="telexec.module.sourcepath">
    <dirset dir="${module.telexec.basedir}">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.telexec" depends="compile.module.telexec.production,compile.module.telexec.tests" description="Compile module Telexec"/>
  
  <target name="compile.module.telexec.production" description="Compile module Telexec; production classes">
    <mkdir dir="${telexec.output.dir}"/>
    <javac destdir="${telexec.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.telexec}"/>
      <bootclasspath refid="telexec.module.bootclasspath"/>
      <classpath refid="telexec.module.production.classpath"/>
      <src refid="telexec.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.telexec"/>
    </javac>
    
    <copy todir="${telexec.output.dir}">
      <fileset dir="${module.telexec.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.telexec.tests" depends="compile.module.telexec.production" description="compile module Telexec; test classes" unless="skip.tests"/>
  
  <target name="clean.module.telexec" description="cleanup module">
    <delete dir="${telexec.output.dir}"/>
    <delete dir="${telexec.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.telexec" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.telexec" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.telexec:jar" value="${basedir}/out/artifacts/Telexec_jar"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.Telexec.jar" value="${artifacts.temp.dir}/Telexec.jar"/>
  </target>
  
  <target name="artifact.telexec:jar" depends="init.artifacts, compile.module.telexec" description="Build &#39;Telexec:jar&#39; artifact">
    <property name="artifact.temp.output.telexec:jar" value="${artifacts.temp.dir}/Telexec_jar"/>
    <mkdir dir="${artifact.temp.output.telexec:jar}"/>
    <jar destfile="${temp.jar.path.Telexec.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${telexec.output.dir}"/>
      <zipfileset src="${basedir}/src/libs/java-json.jar"/>
      <manifest>
        <attribute name="Main-Class" value="com.daniml3.telexec.Main" />
      </manifest>
    </jar>
    <copy file="${temp.jar.path.Telexec.jar}" tofile="${artifact.temp.output.telexec:jar}/Telexec.jar"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.telexec:jar" description="Build all artifacts">
    <mkdir dir="${artifact.output.telexec:jar}"/>
    <copy todir="${artifact.output.telexec:jar}">
      <fileset dir="${artifact.temp.output.telexec:jar}"/>
    </copy>
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>
